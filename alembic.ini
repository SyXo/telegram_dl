# A generic, single database configuration.

[alembic]
# path to migration scripts
# NOTE: `%(here)s` refers to where the `alembic.ini` (aka this file) is located
script_location = %(here)s/telegram_dl/alembic

# template used to generate migration files
file_template = %%(rev)s_%%(year)d-%%(month).2d-%%(day).2d_%%(slug)s

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
# truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; this defaults
# to ./versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar %(here)s/bat ./versions

# the output encoding used when revision files
# are written from script.py.mako
output_encoding = utf-8

# sqlalchemy.url = driver://user:pass@localhost/dbname
sqlalchemy.url = sqlite:///C:/Users/auror/Code/Personal/telegram_dl/scratch/db/telegram_dl.sqlite


[post_write_hooks]
# post_write_hooks defines scripts or Python functions that are run
# on newly generated revision scripts.  See the documentation for further
# detail and examples

# format using "black" - use the console_scripts runner, against the "black" entrypoint
# hooks=black
# black.type=console_scripts
# black.entrypoint=black
# black.options=-l 79

# Logging configuration

# NOTE: if you add more loggers you must list them here due to how logging.config.fileConfig works
[loggers]
keys = root,sqlalchemy,alembic, sqlalchemy_engine, sqlalchemy_orm, sqlalchemy_dialects, sqlalchemy_pool

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARNING
handlers = console
qualname =

######################################################################################
# NOTE: set this to what you want the sqlalchemy.engine logging to be
# or NOTSET if you want it to use the root logger level
# we do this because i guess sqlalchemy sets the default logging level for
# `sqlalchemy` to be WARNING, so if we set the sqlalchemy.engine level to be
# NOTSET, then it just inherits `sqlalchemy`'s logging level instead of using
# the root logger's, but we also don't want all of the other sqlalchemy loggers
# since they log a lot, so we make it so we manually set the root of all the
# sqlalchemy loggers , and then we can leave `sqlalchemy` and
# `sqlalchemy.engine` to be NOTSET so they inherit from the root logger
[logger_sqlalchemy]
level = NOTSET
handlers =
qualname = sqlalchemy

[logger_sqlalchemy_engine]
level = NOTSET
handlers =
qualname = sqlalchemy.engine

# NOTE:
# leave these alone, hardcoding to `warning` as we don't usually need these
[logger_sqlalchemy_orm]
level = WARNING
handlers =
qualname = sqlalchemy.orm

[logger_sqlalchemy_dialects]
level = WARNING
handlers =
qualname = sqlalchemy.dialects

[logger_sqlalchemy_ext]
level = WARNING
handlers =
qualname = sqlalchemy.ext

[logger_sqlalchemy_pool]
level = WARNING
handlers =
qualname = sqlalchemy.pool

######################################################################################


[logger_alembic]
level = NOTSET
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stdout,)
level = DEBUG
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
